import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { lastValueFrom } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../services/stripe-elements.service";
export class StripeElementsDirective {
    constructor(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
        this.elements = new EventEmitter();
        this.state = 'notready';
    }
    async ngOnChanges(changes) {
        this.state = 'starting';
        const elementsOptions = this.elementsOptions;
        const stripe = this.stripe;
        if (changes.elementsOptions || changes.stripe || !this._elements) {
            this._elements = await lastValueFrom(this.stripeElementsService.elements(stripe, elementsOptions));
            this.elements.emit(this._elements);
        }
        this.state = 'ready';
    }
    async ngOnInit() {
        if (this.state === 'notready') {
            this.state = 'starting';
            this._elements = await lastValueFrom(this.stripeElementsService.elements(this.stripe));
            this.elements.emit(this._elements);
            this.state = 'ready';
        }
    }
}
StripeElementsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: StripeElementsDirective, deps: [{ token: i1.StripeElementsService }], target: i0.ɵɵFactoryTarget.Directive });
StripeElementsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.1.0", type: StripeElementsDirective, isStandalone: true, selector: "ngx-stripe-elements,[ngxStripeElements]", inputs: { elementsOptions: "elementsOptions", stripe: "stripe" }, outputs: { elements: "elements" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: StripeElementsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngx-stripe-elements,[ngxStripeElements]',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i1.StripeElementsService }]; }, propDecorators: { elementsOptions: [{
                type: Input
            }], stripe: [{
                type: Input
            }], elements: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudHMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXN0cmlwZS9zcmMvbGliL2RpcmVjdGl2ZXMvZWxlbWVudHMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFvQyxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pHLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7OztBQVlyQyxNQUFNLE9BQU8sdUJBQXVCO0lBU2xDLFlBQW1CLHFCQUE0QztRQUE1QywwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO1FBTHJELGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBa0IsQ0FBQztRQUd4RCxVQUFLLEdBQXNDLFVBQVUsQ0FBQztJQUVZLENBQUM7SUFFbkUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFzQjtRQUN0QyxJQUFJLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQztRQUV4QixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO1FBQzdDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFFM0IsSUFBSSxPQUFPLENBQUMsZUFBZSxJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hFLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxhQUFhLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztZQUNuRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDcEM7UUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztJQUN2QixDQUFDO0lBRUQsS0FBSyxDQUFDLFFBQVE7UUFDWixJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssVUFBVSxFQUFFO1lBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDO1lBRXhCLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxhQUFhLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN2RixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFbkMsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUM7U0FDdEI7SUFDSCxDQUFDOztvSEFsQ1UsdUJBQXVCO3dHQUF2Qix1QkFBdUI7MkZBQXZCLHVCQUF1QjtrQkFKbkMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUseUNBQXlDO29CQUNuRCxVQUFVLEVBQUUsSUFBSTtpQkFDakI7NEdBRVUsZUFBZTtzQkFBdkIsS0FBSztnQkFDRyxNQUFNO3NCQUFkLEtBQUs7Z0JBRUksUUFBUTtzQkFBakIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE9uSW5pdCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgbGFzdFZhbHVlRnJvbSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBTdHJpcGVFbGVtZW50cywgU3RyaXBlRWxlbWVudHNPcHRpb25zIH0gZnJvbSAnQHN0cmlwZS9zdHJpcGUtanMnO1xuXG5pbXBvcnQgeyBTdHJpcGVTZXJ2aWNlSW50ZXJmYWNlIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9zdHJpcGUtaW5zdGFuY2UuaW50ZXJmYWNlJztcblxuaW1wb3J0IHsgU3RyaXBlRWxlbWVudHNTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvc3RyaXBlLWVsZW1lbnRzLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICduZ3gtc3RyaXBlLWVsZW1lbnRzLFtuZ3hTdHJpcGVFbGVtZW50c10nLFxuICBzdGFuZGFsb25lOiB0cnVlXG59KVxuZXhwb3J0IGNsYXNzIFN0cmlwZUVsZW1lbnRzRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBlbGVtZW50c09wdGlvbnM6IFBhcnRpYWw8U3RyaXBlRWxlbWVudHNPcHRpb25zPjtcbiAgQElucHV0KCkgc3RyaXBlOiBTdHJpcGVTZXJ2aWNlSW50ZXJmYWNlO1xuXG4gIEBPdXRwdXQoKSBlbGVtZW50cyA9IG5ldyBFdmVudEVtaXR0ZXI8U3RyaXBlRWxlbWVudHM+KCk7XG5cbiAgX2VsZW1lbnRzOiBTdHJpcGVFbGVtZW50cztcbiAgc3RhdGU6ICdub3RyZWFkeScgfCAnc3RhcnRpbmcnIHwgJ3JlYWR5JyA9ICdub3RyZWFkeSc7XG5cbiAgY29uc3RydWN0b3IocHVibGljIHN0cmlwZUVsZW1lbnRzU2VydmljZTogU3RyaXBlRWxlbWVudHNTZXJ2aWNlKSB7fVxuXG4gIGFzeW5jIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICB0aGlzLnN0YXRlID0gJ3N0YXJ0aW5nJztcblxuICAgIGNvbnN0IGVsZW1lbnRzT3B0aW9ucyA9IHRoaXMuZWxlbWVudHNPcHRpb25zO1xuICAgIGNvbnN0IHN0cmlwZSA9IHRoaXMuc3RyaXBlO1xuXG4gICAgaWYgKGNoYW5nZXMuZWxlbWVudHNPcHRpb25zIHx8IGNoYW5nZXMuc3RyaXBlIHx8ICF0aGlzLl9lbGVtZW50cykge1xuICAgICAgdGhpcy5fZWxlbWVudHMgPSBhd2FpdCBsYXN0VmFsdWVGcm9tKHRoaXMuc3RyaXBlRWxlbWVudHNTZXJ2aWNlLmVsZW1lbnRzKHN0cmlwZSwgZWxlbWVudHNPcHRpb25zKSk7XG4gICAgICB0aGlzLmVsZW1lbnRzLmVtaXQodGhpcy5fZWxlbWVudHMpO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUgPSAncmVhZHknO1xuICB9XG5cbiAgYXN5bmMgbmdPbkluaXQoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgPT09ICdub3RyZWFkeScpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSAnc3RhcnRpbmcnO1xuXG4gICAgICB0aGlzLl9lbGVtZW50cyA9IGF3YWl0IGxhc3RWYWx1ZUZyb20odGhpcy5zdHJpcGVFbGVtZW50c1NlcnZpY2UuZWxlbWVudHModGhpcy5zdHJpcGUpKTtcbiAgICAgIHRoaXMuZWxlbWVudHMuZW1pdCh0aGlzLl9lbGVtZW50cyk7XG5cbiAgICAgIHRoaXMuc3RhdGUgPSAncmVhZHknO1xuICAgIH1cbiAgfVxufVxuIl19