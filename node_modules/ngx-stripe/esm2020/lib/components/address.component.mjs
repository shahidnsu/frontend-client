import { CommonModule } from '@angular/common';
import { Component, Input, ViewChild, EventEmitter, Output, ContentChild, TemplateRef, Optional } from '@angular/core';
import { lastValueFrom } from 'rxjs';
import { NgxStripeElementLoadingTemplateDirective } from '../directives/stripe-element-loading-template.directive';
import * as i0 from "@angular/core";
import * as i1 from "../services/stripe-elements.service";
import * as i2 from "../directives/elements.directive";
import * as i3 from "@angular/common";
export class StripeAddressComponent {
    constructor(stripeElementsService, elementsProvider) {
        this.stripeElementsService = stripeElementsService;
        this.elementsProvider = elementsProvider;
        this.load = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.escape = new EventEmitter();
        this.loaderror = new EventEmitter();
        this.loaderstart = new EventEmitter();
        this.state = 'notready';
    }
    async ngOnChanges(changes) {
        this.state = 'starting';
        let updateElements = false;
        if (!this.elementsProvider && (changes.elementsOptions || changes.stripe || !this.elements)) {
            this.elements = await lastValueFrom(this.stripeElementsService.elements(this.stripe, this.elementsOptions));
            updateElements = true;
        }
        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        if (changes.options || changes.containerClass || !this.element || updateElements) {
            if (this.element && !updateElements) {
                this.update(options);
            }
            else if (this.elements && updateElements) {
                this.createElement(options);
            }
        }
        this.state = 'ready';
    }
    async ngOnInit() {
        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        if (this.elementsProvider) {
            this.elementsSubscription = this.elementsProvider.elements.subscribe((elements) => {
                this.elements = elements;
                this.createElement(options);
                this.state = 'ready';
            });
        }
        else if (this.state === 'notready') {
            this.state = 'starting';
            this.elements = await lastValueFrom(this.stripeElementsService.elements(this.stripe));
            this.createElement(options);
            this.state = 'ready';
        }
    }
    ngOnDestroy() {
        if (this.element) {
            this.element.destroy();
        }
        if (this.elementsSubscription) {
            this.elementsSubscription.unsubscribe();
        }
    }
    update(options) {
        return this.element.update(options);
    }
    getValue() {
        const address = this.elements.getElement('address');
        return address.getValue();
    }
    /**
     * @deprecated
     */
    getAddressElement() {
        return this.element;
    }
    createElement(options) {
        if (this.element) {
            this.element.unmount();
        }
        this.element = this.elements.create('address', options);
        this.element.on('change', (ev) => this.change.emit(ev));
        this.element.on('blur', () => this.blur.emit());
        this.element.on('focus', () => this.focus.emit());
        this.element.on('ready', () => this.ready.emit());
        this.element.on('escape', () => this.escape.emit());
        this.element.on('loaderror', () => this.loaderror.emit());
        this.element.on('loaderstart', () => this.loaderstart.emit());
        this.element.mount(this.stripeElementRef.nativeElement);
        this.load.emit(this.element);
    }
}
StripeAddressComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: StripeAddressComponent, deps: [{ token: i1.StripeElementsService }, { token: i2.StripeElementsDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
StripeAddressComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.0", type: StripeAddressComponent, isStandalone: true, selector: "ngx-stripe-address", inputs: { containerClass: "containerClass", options: "options", elementsOptions: "elementsOptions", stripe: "stripe" }, outputs: { load: "load", blur: "blur", change: "change", focus: "focus", ready: "ready", escape: "escape", loaderror: "loaderror", loaderstart: "loaderstart" }, queries: [{ propertyName: "loadingTemplate", first: true, predicate: NgxStripeElementLoadingTemplateDirective, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "stripeElementRef", first: true, predicate: ["stripeElementRef"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <div class="field" #stripeElementRef>
      <ng-container *ngIf="state !== 'ready' && loadingTemplate" [ngTemplateOutlet]="loadingTemplate"></ng-container>
    </div>
  `, isInline: true, dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: StripeAddressComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-stripe-address',
                    standalone: true,
                    template: `
    <div class="field" #stripeElementRef>
      <ng-container *ngIf="state !== 'ready' && loadingTemplate" [ngTemplateOutlet]="loadingTemplate"></ng-container>
    </div>
  `,
                    imports: [CommonModule]
                }]
        }], ctorParameters: function () { return [{ type: i1.StripeElementsService }, { type: i2.StripeElementsDirective, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { loadingTemplate: [{
                type: ContentChild,
                args: [NgxStripeElementLoadingTemplateDirective, { read: TemplateRef }]
            }], stripeElementRef: [{
                type: ViewChild,
                args: ['stripeElementRef']
            }], containerClass: [{
                type: Input
            }], options: [{
                type: Input
            }], elementsOptions: [{
                type: Input
            }], stripe: [{
                type: Input
            }], load: [{
                type: Output
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], focus: [{
                type: Output
            }], ready: [{
                type: Output
            }], escape: [{
                type: Output
            }], loaderror: [{
                type: Output
            }], loaderstart: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,