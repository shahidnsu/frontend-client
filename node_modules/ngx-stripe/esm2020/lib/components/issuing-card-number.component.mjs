import { CommonModule } from '@angular/common';
import { Component, Input, ViewChild, EventEmitter, Output, ContentChild, TemplateRef, Optional } from '@angular/core';
import { lastValueFrom } from 'rxjs';
import { NgxStripeElementLoadingTemplateDirective } from '../directives/stripe-element-loading-template.directive';
import * as i0 from "@angular/core";
import * as i1 from "../services/stripe-elements.service";
import * as i2 from "../directives/elements.directive";
import * as i3 from "@angular/common";
export class StripeIssuingCardNumberDisplayComponent {
    constructor(cdr, stripeElementsService, elementsProvider) {
        this.cdr = cdr;
        this.stripeElementsService = stripeElementsService;
        this.elementsProvider = elementsProvider;
        this.load = new EventEmitter();
        this.state = 'notready';
    }
    async ngOnChanges(changes) {
        this.state = 'starting';
        let updateElements = false;
        if (!this.elementsProvider && (changes.elementsOptions || changes.stripe || !this.elements)) {
            this.elements = await lastValueFrom(this.stripeElementsService.elements(this.stripe, this.elementsOptions));
            updateElements = true;
        }
        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        if (changes.options || changes.containerClass || !this.element || updateElements) {
            if (this.element && !updateElements) {
                this.update(options);
            }
            else if (this.elements && updateElements) {
                this.createElement(options);
            }
        }
    }
    async ngOnInit() {
        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        if (this.elementsProvider) {
            this.elementsSubscription = this.elementsProvider.elements.subscribe((elements) => {
                this.elements = elements;
                this.createElement(options);
            });
        }
        else if (this.state === 'notready') {
            this.state = 'starting';
            this.elements = await lastValueFrom(this.stripeElementsService.elements(this.stripe));
            this.createElement(options);
        }
    }
    ngOnDestroy() {
        if (this.element) {
            this.element.destroy();
        }
        if (this.elementsSubscription) {
            this.elementsSubscription.unsubscribe();
        }
    }
    update(options) {
        this.element.update(options);
    }
    createElement(options) {
        this.state = 'ready';
        this.cdr.detectChanges();
        if (this.element) {
            this.element.unmount();
        }
        this.element = this.elements.create('issuingCardNumberDisplay', options);
        this.element.mount(this.stripeElementRef.nativeElement);
        this.load.emit(this.element);
    }
}
StripeIssuingCardNumberDisplayComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: StripeIssuingCardNumberDisplayComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.StripeElementsService }, { token: i2.StripeElementsDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
StripeIssuingCardNumberDisplayComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.0", type: StripeIssuingCardNumberDisplayComponent, isStandalone: true, selector: "ngx-stripe-issuing-card-number-display", inputs: { containerClass: "containerClass", options: "options", elementsOptions: "elementsOptions", stripe: "stripe" }, outputs: { load: "load" }, queries: [{ propertyName: "loadingTemplate", first: true, predicate: NgxStripeElementLoadingTemplateDirective, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "stripeElementRef", first: true, predicate: ["stripeElementRef"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <div class="field" #stripeElementRef>
      <ng-container *ngIf="state !== 'ready' && loadingTemplate" [ngTemplateOutlet]="loadingTemplate"></ng-container>
    </div>
  `, isInline: true, dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.0", ngImport: i0, type: StripeIssuingCardNumberDisplayComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-stripe-issuing-card-number-display',
                    standalone: true,
                    template: `
    <div class="field" #stripeElementRef>
      <ng-container *ngIf="state !== 'ready' && loadingTemplate" [ngTemplateOutlet]="loadingTemplate"></ng-container>
    </div>
  `,
                    imports: [CommonModule]
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.StripeElementsService }, { type: i2.StripeElementsDirective, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { loadingTemplate: [{
                type: ContentChild,
                args: [NgxStripeElementLoadingTemplateDirective, { read: TemplateRef }]
            }], stripeElementRef: [{
                type: ViewChild,
                args: ['stripeElementRef']
            }], containerClass: [{
                type: Input
            }], options: [{
                type: Input
            }], elementsOptions: [{
                type: Input
            }], stripe: [{
                type: Input
            }], load: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,